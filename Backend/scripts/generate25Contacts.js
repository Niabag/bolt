const mongoose = require('mongoose');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

// Import des mod√®les
const User = require('../models/user');
const Client = require('../models/client');
const Devis = require('../models/devis');
const BusinessCard = require('../models/businessCard');

// Configuration de la base de donn√©es
const connectDB = require('../config/database');

// Donn√©es pour g√©n√©rer des clients vari√©s
const firstNames = [
  'Alexandre', 'Isabelle', 'Julien', 'Nathalie', 'S√©bastien', 'Val√©rie', 'Maxime', 'Caroline',
  'Thomas', 'Sophie', 'Nicolas', 'Marie', 'Pierre', 'Camille', 'Lucas', 'Emma', 'Hugo', 'Chlo√©',
  'Antoine', 'L√©a', 'Mathieu', 'Sarah', 'Romain', 'Laura', 'Florian'
];

const lastNames = [
  'Martin', 'Bernard', 'Dubois', 'Thomas', 'Robert', 'Richard', 'Petit', 'Durand', 'Leroy', 'Moreau',
  'Simon', 'Laurent', 'Lefebvre', 'Michel', 'Garcia', 'David', 'Bertrand', 'Roux', 'Vincent', 'Fournier',
  'Morel', 'Girard', 'Andre', 'Lefevre', 'Mercier'
];

const companies = [
  'Tech Solutions', 'Digital Agency', 'Innovation Lab', 'Creative Studio', 'Consulting Pro',
  'Web Factory', 'Design House', 'Marketing Plus', 'Business Center', 'Service Express',
  'Quality First', 'Expert Conseil', 'Pro Services', 'Elite Solutions', 'Smart Business',
  'Dynamic Group', 'Success Partners', 'Prime Consulting', 'Alpha Solutions', 'Beta Services',
  'Gamma Tech', 'Delta Digital', 'Epsilon Design', 'Zeta Marketing', 'Eta Consulting'
];

// Adresses fran√ßaises r√©alistes
const streets = [
  'Rue de la R√©publique', 'Avenue des Champs-√âlys√©es', 'Boulevard Saint-Germain', 'Rue de Rivoli',
  'Place de la Bastille', 'Rue du Faubourg Saint-Antoine', 'Avenue de la Grande Arm√©e', 'Rue de la Paix',
  'Boulevard Haussmann', 'Rue Saint-Honor√©', 'Avenue Montaigne', 'Rue de Vaugirard',
  'Boulevard Voltaire', 'Rue de Belleville', 'Avenue Parmentier', 'Rue Oberkampf',
  'Boulevard de M√©nilmontant', 'Rue de Charonne', 'Avenue de la R√©publique', 'Rue du Temple',
  'Boulevard Beaumarchais', 'Rue de Turbigo', 'Avenue de l\'Op√©ra', 'Rue de Ch√¢teaudun',
  'Boulevard des Italiens'
];

const cities = [
  { name: 'Paris', postalCodes: ['75001', '75002', '75003', '75004', '75005', '75006', '75007', '75008', '75009', '75010'] },
  { name: 'Lyon', postalCodes: ['69001', '69002', '69003', '69004', '69005', '69006', '69007', '69008', '69009'] },
  { name: 'Marseille', postalCodes: ['13001', '13002', '13003', '13004', '13005', '13006', '13007', '13008'] },
  { name: 'Toulouse', postalCodes: ['31000', '31100', '31200', '31300', '31400', '31500'] },
  { name: 'Nice', postalCodes: ['06000', '06100', '06200', '06300'] },
  { name: 'Nantes', postalCodes: ['44000', '44100', '44200', '44300'] },
  { name: 'Montpellier', postalCodes: ['34000', '34070', '34080', '34090'] },
  { name: 'Strasbourg', postalCodes: ['67000', '67100', '67200'] },
  { name: 'Bordeaux', postalCodes: ['33000', '33100', '33200', '33300'] },
  { name: 'Lille', postalCodes: ['59000', '59100', '59200', '59300'] }
];

const domains = ['gmail.com', 'hotmail.fr', 'yahoo.fr', 'outlook.com', 'free.fr', 'orange.fr', 'sfr.fr', 'laposte.net', 'wanadoo.fr'];

const statuses = ['nouveau', 'en_attente', 'active', 'inactive'];

const sampleNotes = [
  'Int√©ress√© par un site e-commerce',
  'Souhaite une application mobile',
  'Besoin d\'un site vitrine professionnel',
  'Demande de devis pour refonte de site',
  'Contact suite au salon professionnel',
  'Recommand√© par Marie Dupont',
  'Projet de d√©veloppement √† discuter',
  'Rendez-vous √† programmer',
  'Relancer en septembre',
  'Envoi documentation effectu√©',
  'Attente de validation budget',
  'Projet report√© √† Q3',
  'Demande de fonctionnalit√©s sp√©cifiques',
  'Besoin urgent - priorit√© haute',
  'Ancien client - fid√©lisation'
];

// Titres de devis r√©alistes
const devisTitles = [
  'Site vitrine responsive',
  'Application mobile iOS/Android',
  'Refonte site e-commerce',
  'Maintenance annuelle',
  'D√©veloppement API REST',
  'Int√©gration CRM',
  'Optimisation SEO',
  'Campagne marketing digital',
  'Cr√©ation identit√© visuelle',
  'D√©veloppement module sp√©cifique',
  'Migration WordPress',
  'Audit de s√©curit√©',
  'Formation √©quipe technique',
  'D√©veloppement intranet',
  'Cr√©ation landing page'
];

// Fonction pour g√©n√©rer un num√©ro de t√©l√©phone fran√ßais
const generatePhoneNumber = () => {
  const prefixes = ['06', '07'];
  const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
  const numbers = [];
  for (let i = 0; i < 4; i++) {
    numbers.push(String(Math.floor(Math.random() * 90) + 10));
  }
  return `${prefix} ${numbers.join(' ')}`;
};

// Fonction pour g√©n√©rer un email
const generateEmail = (firstName, lastName) => {
  const domain = domains[Math.floor(Math.random() * domains.length)];
  const variations = [
    `${firstName.toLowerCase()}.${lastName.toLowerCase()}`,
    `${firstName.toLowerCase()}${lastName.toLowerCase()}`,
    `${firstName.toLowerCase()}_${lastName.toLowerCase()}`,
    `${firstName.charAt(0).toLowerCase()}${lastName.toLowerCase()}`,
    `${firstName.toLowerCase()}${Math.floor(Math.random() * 99)}`
  ];
  const variation = variations[Math.floor(Math.random() * variations.length)];
  return `${variation}@${domain}`;
};

// Fonction pour g√©n√©rer une adresse fran√ßaise r√©aliste
const generateAddress = () => {
  const street = streets[Math.floor(Math.random() * streets.length)];
  const number = Math.floor(Math.random() * 200) + 1;
  const city = cities[Math.floor(Math.random() * cities.length)];
  const postalCode = city.postalCodes[Math.floor(Math.random() * city.postalCodes.length)];
  
  return {
    address: `${number} ${street}`,
    postalCode: postalCode,
    city: city.name
  };
};

// Fonction pour g√©n√©rer une date al√©atoire dans les 6 derniers mois
const generateRandomDate = () => {
  const now = new Date();
  const sixMonthsAgo = new Date(now.getTime() - (6 * 30 * 24 * 60 * 60 * 1000));
  const randomTime = sixMonthsAgo.getTime() + Math.random() * (now.getTime() - sixMonthsAgo.getTime());
  return new Date(randomTime);
};

// Fonction pour g√©n√©rer un devis al√©atoire
const generateRandomDevis = (clientId, userId) => {
  const title = devisTitles[Math.floor(Math.random() * devisTitles.length)];
  const dateDevis = generateRandomDate();
  
  // Date de validit√© (30 jours apr√®s la date du devis)
  const dateValidite = new Date(dateDevis);
  dateValidite.setDate(dateValidite.getDate() + 30);
  
  // G√©n√©rer entre 1 et 4 articles
  const articlesCount = Math.floor(Math.random() * 4) + 1;
  const articles = [];
  
  const articleDescriptions = [
    'Conception graphique',
    'D√©veloppement frontend',
    'D√©veloppement backend',
    'Int√©gration CMS',
    'D√©veloppement API',
    'Tests et d√©ploiement',
    'Formation utilisateurs',
    'Maintenance pr√©ventive',
    'Optimisation performances',
    'Mise en place analytics',
    'Cr√©ation contenu',
    'R√©f√©rencement SEO',
    'Int√©gration r√©seaux sociaux',
    'Mise en place e-commerce',
    'D√©veloppement fonctionnalit√©s sp√©cifiques'
  ];
  
  const units = ['forfait', 'jour', 'heure', 'page', 'module'];
  const tvaRates = ['20', '10', '5.5'];
  
  for (let i = 0; i < articlesCount; i++) {
    const description = articleDescriptions[Math.floor(Math.random() * articleDescriptions.length)];
    const unitPrice = Math.floor(Math.random() * 1500) + 300; // Entre 300 et 1800‚Ç¨
    const quantity = Math.floor(Math.random() * 5) + 1; // Entre 1 et 5
    const unit = units[Math.floor(Math.random() * units.length)];
    const tvaRate = tvaRates[Math.floor(Math.random() * tvaRates.length)];
    
    articles.push({
      description,
      unitPrice,
      quantity,
      unit,
      tvaRate
    });
  }
  
  // Calculer le montant total
  const amount = articles.reduce((sum, article) => sum + (article.unitPrice * article.quantity), 0);
  
  // Statut du devis
  const statusOptions = ['nouveau', 'en_attente', 'fini', 'inactif'];
  const status = statusOptions[Math.floor(Math.random() * statusOptions.length)];
  
  return {
    title,
    description: `Devis pour ${title}`,
    amount,
    clientId,
    userId,
    dateDevis: dateDevis.toISOString().split('T')[0],
    dateValidite: dateValidite.toISOString().split('T')[0],
    tvaRate: 20,
    entrepriseName: "CRM Pro Services",
    entrepriseAddress: "123 Avenue des D√©veloppeurs",
    entrepriseCity: "75001 Paris",
    entreprisePhone: "01 23 45 67 89",
    entrepriseEmail: "contact@crmpro.com",
    articles,
    status
  };
};

// Fonction pour g√©n√©rer une carte de visite
const generateBusinessCard = (userId) => {
  // Image de carte de visite par d√©faut (base64 tronqu√© pour l'exemple)
  const defaultCardImage = '/images/modern-business-card-design-template-42551612346d5b08984f0b61a8044609_screen.jpg';
  
  // Configuration de la carte
  const cardConfig = {
    showQR: true,
    qrPosition: ['bottom-right', 'bottom-left', 'top-right', 'top-left'][Math.floor(Math.random() * 4)],
    qrSize: Math.floor(Math.random() * 50) + 100, // Entre 100 et 150
    actions: [
      {
        id: Date.now(),
        type: 'website',
        url: 'https://www.example.com',
        delay: 1000,
        active: true
      },
      {
        id: Date.now() + 1,
        type: 'form',
        delay: 2000,
        active: true
      }
    ]
  };
  
  return {
    userId,
    cardImage: defaultCardImage,
    cardConfig
  };
};

const generate25Contacts = async () => {
  try {
    console.log('üöÄ G√©n√©ration de 25 utilisateurs de test...');
    
    // Connexion √† la base de donn√©es
    await connectDB();
    
    // Cr√©er un utilisateur admin
    const adminPassword = 'password123';
    const hashedPassword = await bcrypt.hash(adminPassword, 12);
    
    let adminUser = await User.findOne({ email: 'admin@crmpro.com' });
    
    if (!adminUser) {
      adminUser = new User({
        name: 'Admin CRM',
        email: 'admin@crmpro.com',
        password: hashedPassword
      });
      
      await adminUser.save();
      console.log('‚úÖ Utilisateur cr√©√©: admin@crmpro.com');
    } else {
      console.log('‚ÑπÔ∏è Utilisateur admin@crmpro.com existe d√©j√†');
    }
    
    // Supprimer les clients existants de l'admin
    await Client.deleteMany({ userId: adminUser._id });
    await Devis.deleteMany({ userId: adminUser._id });
    await BusinessCard.deleteMany({ userId: adminUser._id });
    
    // G√©n√©rer une carte de visite pour l'admin
    const businessCard = new BusinessCard(generateBusinessCard(adminUser._id));
    await businessCard.save();
    console.log('‚úÖ Carte de visite cr√©√©e pour: admin@crmpro.com');
    
    // G√©n√©rer 25 clients
    const clients = [];
    const usedEmails = new Set();
    
    for (let i = 0; i < 25; i++) {
      const firstName = firstNames[i];
      const lastName = lastNames[i];
      
      // G√©n√©rer un email unique
      let email;
      let attempts = 0;
      do {
        email = generateEmail(firstName, lastName);
        attempts++;
        if (attempts > 10) {
          email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}.${Date.now()}@gmail.com`;
          break;
        }
      } while (usedEmails.has(email));
      
      usedEmails.add(email);
      
      // G√©n√©rer une adresse
      const addressData = generateAddress();
      
      // D√©terminer si le client a une entreprise
      const hasCompany = Math.random() > 0.3;
      
      const client = new Client({
        name: `${firstName} ${lastName}`,
        email: email,
        phone: generatePhoneNumber(),
        company: hasCompany ? companies[Math.floor(Math.random() * companies.length)] : '',
        notes: Math.random() > 0.4 ? sampleNotes[Math.floor(Math.random() * sampleNotes.length)] : '',
        address: addressData.address,
        postalCode: addressData.postalCode,
        city: addressData.city,
        status: statuses[Math.floor(Math.random() * statuses.length)],
        userId: adminUser._id,
        createdAt: generateRandomDate(),
        updatedAt: generateRandomDate()
      });
      
      const savedClient = await client.save();
      clients.push(savedClient);
      console.log(`‚úÖ Client cr√©√©: ${email}`);
      
      // G√©n√©rer entre 0 et 3 devis pour chaque client
      const devisCount = Math.floor(Math.random() * 4);
      
      for (let j = 0; j < devisCount; j++) {
        const devisData = generateRandomDevis(savedClient._id, adminUser._id);
        const devis = new Devis(devisData);
        await devis.save();
        console.log(`‚úÖ Devis cr√©√© pour: ${firstName} ${lastName}`);
      }
    }
    
    // Statistiques
    const statusStats = {};
    clients.forEach(client => {
      statusStats[client.status] = (statusStats[client.status] || 0) + 1;
    });
    
    const devisCount = await Devis.countDocuments({ userId: adminUser._id });
    
    console.log('üéâ G√©n√©ration termin√©e ! 25 utilisateurs cr√©√©s avec succ√®s.');
    console.log('üìä Statistiques:');
    console.log(`   - 25 clients cr√©√©s`);
    console.log(`   - ${devisCount} devis cr√©√©s`);
    console.log('üìà R√©partition par statut:');
    
    Object.entries(statusStats).forEach(([status, count]) => {
      const emoji = status === 'nouveau' ? 'üîµ' : 
                   status === 'en_attente' ? 'üü£' : 
                   status === 'active' ? 'üü¢' : 'üî¥';
      console.log(`   ${emoji} ${status}: ${count} clients`);
    });
    
    console.log('');
    console.log('üîê Informations de connexion:');
    console.log(`   üìß Email: admin@crmpro.com`);
    console.log(`   üîë Mot de passe: password123`);
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration:', error);
    process.exit(1);
  }
};

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  generate25Contacts();
}

module.exports = generate25Contacts;